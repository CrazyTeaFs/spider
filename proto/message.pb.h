// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace spider {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_message_2eproto();
void protobuf_AssignDesc_message_2eproto();
void protobuf_ShutdownFile_message_2eproto();

class SMessage;
class Header;
class Body;
class Response;
class HeartBeatRequest;
class HeartBeatResponse;
class LoginRequest;
class LoginResponse;
class FriendListRequest;
class FriendListResponse;
class MysqlRow;
class ExecuteSqlRequest;
class ExecuteSqlResponse;

enum MessageType {
  HEART_BEAT_REQUEST = 10001,
  HEART_BEAT_RESPONSE = 10002,
  LOGIN_REQUEST = 10003,
  LOGIN_RESPONSE = 10004,
  FRIEND_LIST_REQUEST = 10005,
  FRIEND_LIST_RESPONSE = 10006,
  EXECUTE_SQL_REQUEST = 10007,
  EXECUTE_SQL_RESPONSE = 10008
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = HEART_BEAT_REQUEST;
const MessageType MessageType_MAX = EXECUTE_SQL_RESPONSE;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor();
inline const ::std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageType_descriptor(), value);
}
inline bool MessageType_Parse(
    const ::std::string& name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================

class SMessage : public ::google::protobuf::Message {
 public:
  SMessage();
  virtual ~SMessage();

  SMessage(const SMessage& from);

  inline SMessage& operator=(const SMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SMessage& default_instance();

  void Swap(SMessage* other);

  // implements Message ----------------------------------------------

  SMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SMessage& from);
  void MergeFrom(const SMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .spider.Header header = 10;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 10;
  inline const ::spider::Header& header() const;
  inline ::spider::Header* mutable_header();
  inline ::spider::Header* release_header();
  inline void set_allocated_header(::spider::Header* header);

  // optional .spider.Body body = 20;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 20;
  inline const ::spider::Body& body() const;
  inline ::spider::Body* mutable_body();
  inline ::spider::Body* release_body();
  inline void set_allocated_body(::spider::Body* body);

  // @@protoc_insertion_point(class_scope:spider.SMessage)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_body();
  inline void clear_has_body();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::spider::Header* header_;
  ::spider::Body* body_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static SMessage* default_instance_;
};
// -------------------------------------------------------------------

class Header : public ::google::protobuf::Message {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  void Swap(Header* other);

  // implements Message ----------------------------------------------

  Header* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 flow_no = 10;
  inline bool has_flow_no() const;
  inline void clear_flow_no();
  static const int kFlowNoFieldNumber = 10;
  inline ::google::protobuf::uint32 flow_no() const;
  inline void set_flow_no(::google::protobuf::uint32 value);

  // required uint32 src_fsm = 20;
  inline bool has_src_fsm() const;
  inline void clear_src_fsm();
  static const int kSrcFsmFieldNumber = 20;
  inline ::google::protobuf::uint32 src_fsm() const;
  inline void set_src_fsm(::google::protobuf::uint32 value);

  // required uint32 dst_fsm = 30;
  inline bool has_dst_fsm() const;
  inline void clear_dst_fsm();
  static const int kDstFsmFieldNumber = 30;
  inline ::google::protobuf::uint32 dst_fsm() const;
  inline void set_dst_fsm(::google::protobuf::uint32 value);

  // required uint32 src_state = 40;
  inline bool has_src_state() const;
  inline void clear_src_state();
  static const int kSrcStateFieldNumber = 40;
  inline ::google::protobuf::uint32 src_state() const;
  inline void set_src_state(::google::protobuf::uint32 value);

  // required uint32 dst_state = 50;
  inline bool has_dst_state() const;
  inline void clear_dst_state();
  static const int kDstStateFieldNumber = 50;
  inline ::google::protobuf::uint32 dst_state() const;
  inline void set_dst_state(::google::protobuf::uint32 value);

  // required .spider.MessageType type = 60;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 60;
  inline ::spider::MessageType type() const;
  inline void set_type(::spider::MessageType value);

  // @@protoc_insertion_point(class_scope:spider.Header)
 private:
  inline void set_has_flow_no();
  inline void clear_has_flow_no();
  inline void set_has_src_fsm();
  inline void clear_has_src_fsm();
  inline void set_has_dst_fsm();
  inline void clear_has_dst_fsm();
  inline void set_has_src_state();
  inline void clear_has_src_state();
  inline void set_has_dst_state();
  inline void clear_has_dst_state();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 flow_no_;
  ::google::protobuf::uint32 src_fsm_;
  ::google::protobuf::uint32 dst_fsm_;
  ::google::protobuf::uint32 src_state_;
  ::google::protobuf::uint32 dst_state_;
  int type_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Header* default_instance_;
};
// -------------------------------------------------------------------

class Body : public ::google::protobuf::Message {
 public:
  Body();
  virtual ~Body();

  Body(const Body& from);

  inline Body& operator=(const Body& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Body& default_instance();

  void Swap(Body* other);

  // implements Message ----------------------------------------------

  Body* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Body& from);
  void MergeFrom(const Body& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Body)
  // @@protoc_insertion_point(class_scope:spider.Body)
 private:

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Body* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 retcode = 10;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 10;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // optional string error_msg = 20;
  inline bool has_error_msg() const;
  inline void clear_error_msg();
  static const int kErrorMsgFieldNumber = 20;
  inline const ::std::string& error_msg() const;
  inline void set_error_msg(const ::std::string& value);
  inline void set_error_msg(const char* value);
  inline void set_error_msg(const char* value, size_t size);
  inline ::std::string* mutable_error_msg();
  inline ::std::string* release_error_msg();
  inline void set_allocated_error_msg(::std::string* error_msg);

  // @@protoc_insertion_point(class_scope:spider.Response)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_error_msg();
  inline void clear_has_error_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* error_msg_;
  ::google::protobuf::int32 retcode_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// -------------------------------------------------------------------

class HeartBeatRequest : public ::google::protobuf::Message {
 public:
  HeartBeatRequest();
  virtual ~HeartBeatRequest();

  HeartBeatRequest(const HeartBeatRequest& from);

  inline HeartBeatRequest& operator=(const HeartBeatRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartBeatRequest& default_instance();

  void Swap(HeartBeatRequest* other);

  // implements Message ----------------------------------------------

  HeartBeatRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeartBeatRequest& from);
  void MergeFrom(const HeartBeatRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:spider.HeartBeatRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static HeartBeatRequest* default_instance_;
};
// -------------------------------------------------------------------

class HeartBeatResponse : public ::google::protobuf::Message {
 public:
  HeartBeatResponse();
  virtual ~HeartBeatResponse();

  HeartBeatResponse(const HeartBeatResponse& from);

  inline HeartBeatResponse& operator=(const HeartBeatResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartBeatResponse& default_instance();

  void Swap(HeartBeatResponse* other);

  // implements Message ----------------------------------------------

  HeartBeatResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeartBeatResponse& from);
  void MergeFrom(const HeartBeatResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .spider.Response rc = 10;
  inline bool has_rc() const;
  inline void clear_rc();
  static const int kRcFieldNumber = 10;
  inline const ::spider::Response& rc() const;
  inline ::spider::Response* mutable_rc();
  inline ::spider::Response* release_rc();
  inline void set_allocated_rc(::spider::Response* rc);

  // @@protoc_insertion_point(class_scope:spider.HeartBeatResponse)
 private:
  inline void set_has_rc();
  inline void clear_has_rc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::spider::Response* rc_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static HeartBeatResponse* default_instance_;
};
// -------------------------------------------------------------------

class LoginRequest : public ::google::protobuf::Message {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRequest& default_instance();

  void Swap(LoginRequest* other);

  // implements Message ----------------------------------------------

  LoginRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string login_name = 10;
  inline bool has_login_name() const;
  inline void clear_login_name();
  static const int kLoginNameFieldNumber = 10;
  inline const ::std::string& login_name() const;
  inline void set_login_name(const ::std::string& value);
  inline void set_login_name(const char* value);
  inline void set_login_name(const char* value, size_t size);
  inline ::std::string* mutable_login_name();
  inline ::std::string* release_login_name();
  inline void set_allocated_login_name(::std::string* login_name);

  // required string passwd = 20;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 20;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const char* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  inline void set_allocated_passwd(::std::string* passwd);

  // @@protoc_insertion_point(class_scope:spider.LoginRequest)
 private:
  inline void set_has_login_name();
  inline void clear_has_login_name();
  inline void set_has_passwd();
  inline void clear_has_passwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* login_name_;
  ::std::string* passwd_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static LoginRequest* default_instance_;
};
// -------------------------------------------------------------------

class LoginResponse : public ::google::protobuf::Message {
 public:
  LoginResponse();
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginResponse& default_instance();

  void Swap(LoginResponse* other);

  // implements Message ----------------------------------------------

  LoginResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .spider.Response rc = 10;
  inline bool has_rc() const;
  inline void clear_rc();
  static const int kRcFieldNumber = 10;
  inline const ::spider::Response& rc() const;
  inline ::spider::Response* mutable_rc();
  inline ::spider::Response* release_rc();
  inline void set_allocated_rc(::spider::Response* rc);

  // @@protoc_insertion_point(class_scope:spider.LoginResponse)
 private:
  inline void set_has_rc();
  inline void clear_has_rc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::spider::Response* rc_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static LoginResponse* default_instance_;
};
// -------------------------------------------------------------------

class FriendListRequest : public ::google::protobuf::Message {
 public:
  FriendListRequest();
  virtual ~FriendListRequest();

  FriendListRequest(const FriendListRequest& from);

  inline FriendListRequest& operator=(const FriendListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendListRequest& default_instance();

  void Swap(FriendListRequest* other);

  // implements Message ----------------------------------------------

  FriendListRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendListRequest& from);
  void MergeFrom(const FriendListRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string login_name = 10;
  inline bool has_login_name() const;
  inline void clear_login_name();
  static const int kLoginNameFieldNumber = 10;
  inline const ::std::string& login_name() const;
  inline void set_login_name(const ::std::string& value);
  inline void set_login_name(const char* value);
  inline void set_login_name(const char* value, size_t size);
  inline ::std::string* mutable_login_name();
  inline ::std::string* release_login_name();
  inline void set_allocated_login_name(::std::string* login_name);

  // @@protoc_insertion_point(class_scope:spider.FriendListRequest)
 private:
  inline void set_has_login_name();
  inline void clear_has_login_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* login_name_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static FriendListRequest* default_instance_;
};
// -------------------------------------------------------------------

class FriendListResponse : public ::google::protobuf::Message {
 public:
  FriendListResponse();
  virtual ~FriendListResponse();

  FriendListResponse(const FriendListResponse& from);

  inline FriendListResponse& operator=(const FriendListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendListResponse& default_instance();

  void Swap(FriendListResponse* other);

  // implements Message ----------------------------------------------

  FriendListResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendListResponse& from);
  void MergeFrom(const FriendListResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .spider.Response rc = 10;
  inline bool has_rc() const;
  inline void clear_rc();
  static const int kRcFieldNumber = 10;
  inline const ::spider::Response& rc() const;
  inline ::spider::Response* mutable_rc();
  inline ::spider::Response* release_rc();
  inline void set_allocated_rc(::spider::Response* rc);

  // repeated string friend_list = 20;
  inline int friend_list_size() const;
  inline void clear_friend_list();
  static const int kFriendListFieldNumber = 20;
  inline const ::std::string& friend_list(int index) const;
  inline ::std::string* mutable_friend_list(int index);
  inline void set_friend_list(int index, const ::std::string& value);
  inline void set_friend_list(int index, const char* value);
  inline void set_friend_list(int index, const char* value, size_t size);
  inline ::std::string* add_friend_list();
  inline void add_friend_list(const ::std::string& value);
  inline void add_friend_list(const char* value);
  inline void add_friend_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& friend_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_friend_list();

  // @@protoc_insertion_point(class_scope:spider.FriendListResponse)
 private:
  inline void set_has_rc();
  inline void clear_has_rc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::spider::Response* rc_;
  ::google::protobuf::RepeatedPtrField< ::std::string> friend_list_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static FriendListResponse* default_instance_;
};
// -------------------------------------------------------------------

class MysqlRow : public ::google::protobuf::Message {
 public:
  MysqlRow();
  virtual ~MysqlRow();

  MysqlRow(const MysqlRow& from);

  inline MysqlRow& operator=(const MysqlRow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MysqlRow& default_instance();

  void Swap(MysqlRow* other);

  // implements Message ----------------------------------------------

  MysqlRow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MysqlRow& from);
  void MergeFrom(const MysqlRow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string column = 10;
  inline int column_size() const;
  inline void clear_column();
  static const int kColumnFieldNumber = 10;
  inline const ::std::string& column(int index) const;
  inline ::std::string* mutable_column(int index);
  inline void set_column(int index, const ::std::string& value);
  inline void set_column(int index, const char* value);
  inline void set_column(int index, const char* value, size_t size);
  inline ::std::string* add_column();
  inline void add_column(const ::std::string& value);
  inline void add_column(const char* value);
  inline void add_column(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& column() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_column();

  // @@protoc_insertion_point(class_scope:spider.MysqlRow)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> column_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static MysqlRow* default_instance_;
};
// -------------------------------------------------------------------

class ExecuteSqlRequest : public ::google::protobuf::Message {
 public:
  ExecuteSqlRequest();
  virtual ~ExecuteSqlRequest();

  ExecuteSqlRequest(const ExecuteSqlRequest& from);

  inline ExecuteSqlRequest& operator=(const ExecuteSqlRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecuteSqlRequest& default_instance();

  void Swap(ExecuteSqlRequest* other);

  // implements Message ----------------------------------------------

  ExecuteSqlRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExecuteSqlRequest& from);
  void MergeFrom(const ExecuteSqlRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string db_name = 10;
  inline bool has_db_name() const;
  inline void clear_db_name();
  static const int kDbNameFieldNumber = 10;
  inline const ::std::string& db_name() const;
  inline void set_db_name(const ::std::string& value);
  inline void set_db_name(const char* value);
  inline void set_db_name(const char* value, size_t size);
  inline ::std::string* mutable_db_name();
  inline ::std::string* release_db_name();
  inline void set_allocated_db_name(::std::string* db_name);

  // required string sql = 20;
  inline bool has_sql() const;
  inline void clear_sql();
  static const int kSqlFieldNumber = 20;
  inline const ::std::string& sql() const;
  inline void set_sql(const ::std::string& value);
  inline void set_sql(const char* value);
  inline void set_sql(const char* value, size_t size);
  inline ::std::string* mutable_sql();
  inline ::std::string* release_sql();
  inline void set_allocated_sql(::std::string* sql);

  // @@protoc_insertion_point(class_scope:spider.ExecuteSqlRequest)
 private:
  inline void set_has_db_name();
  inline void clear_has_db_name();
  inline void set_has_sql();
  inline void clear_has_sql();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* db_name_;
  ::std::string* sql_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static ExecuteSqlRequest* default_instance_;
};
// -------------------------------------------------------------------

class ExecuteSqlResponse : public ::google::protobuf::Message {
 public:
  ExecuteSqlResponse();
  virtual ~ExecuteSqlResponse();

  ExecuteSqlResponse(const ExecuteSqlResponse& from);

  inline ExecuteSqlResponse& operator=(const ExecuteSqlResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecuteSqlResponse& default_instance();

  void Swap(ExecuteSqlResponse* other);

  // implements Message ----------------------------------------------

  ExecuteSqlResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExecuteSqlResponse& from);
  void MergeFrom(const ExecuteSqlResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .spider.Response rc = 10;
  inline bool has_rc() const;
  inline void clear_rc();
  static const int kRcFieldNumber = 10;
  inline const ::spider::Response& rc() const;
  inline ::spider::Response* mutable_rc();
  inline ::spider::Response* release_rc();
  inline void set_allocated_rc(::spider::Response* rc);

  // repeated .spider.MysqlRow row = 20;
  inline int row_size() const;
  inline void clear_row();
  static const int kRowFieldNumber = 20;
  inline const ::spider::MysqlRow& row(int index) const;
  inline ::spider::MysqlRow* mutable_row(int index);
  inline ::spider::MysqlRow* add_row();
  inline const ::google::protobuf::RepeatedPtrField< ::spider::MysqlRow >&
      row() const;
  inline ::google::protobuf::RepeatedPtrField< ::spider::MysqlRow >*
      mutable_row();

  // optional uint32 insert_id = 30;
  inline bool has_insert_id() const;
  inline void clear_insert_id();
  static const int kInsertIdFieldNumber = 30;
  inline ::google::protobuf::uint32 insert_id() const;
  inline void set_insert_id(::google::protobuf::uint32 value);

  // optional uint32 affected_rows = 40;
  inline bool has_affected_rows() const;
  inline void clear_affected_rows();
  static const int kAffectedRowsFieldNumber = 40;
  inline ::google::protobuf::uint32 affected_rows() const;
  inline void set_affected_rows(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:spider.ExecuteSqlResponse)
 private:
  inline void set_has_rc();
  inline void clear_has_rc();
  inline void set_has_insert_id();
  inline void clear_has_insert_id();
  inline void set_has_affected_rows();
  inline void clear_has_affected_rows();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::spider::Response* rc_;
  ::google::protobuf::RepeatedPtrField< ::spider::MysqlRow > row_;
  ::google::protobuf::uint32 insert_id_;
  ::google::protobuf::uint32 affected_rows_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static ExecuteSqlResponse* default_instance_;
};
// ===================================================================

static const int kHeartBeatRequestFieldNumber = 10001;
extern ::google::protobuf::internal::ExtensionIdentifier< ::spider::Body,
    ::google::protobuf::internal::MessageTypeTraits< ::spider::HeartBeatRequest >, 11, false >
  heart_beat_request;
static const int kHeartBeatResponseFieldNumber = 10002;
extern ::google::protobuf::internal::ExtensionIdentifier< ::spider::Body,
    ::google::protobuf::internal::MessageTypeTraits< ::spider::HeartBeatResponse >, 11, false >
  heart_beat_response;
static const int kLoginRequestFieldNumber = 10003;
extern ::google::protobuf::internal::ExtensionIdentifier< ::spider::Body,
    ::google::protobuf::internal::MessageTypeTraits< ::spider::LoginRequest >, 11, false >
  login_request;
static const int kLoginResponseFieldNumber = 10004;
extern ::google::protobuf::internal::ExtensionIdentifier< ::spider::Body,
    ::google::protobuf::internal::MessageTypeTraits< ::spider::LoginResponse >, 11, false >
  login_response;
static const int kFriendListRequestFieldNumber = 10005;
extern ::google::protobuf::internal::ExtensionIdentifier< ::spider::Body,
    ::google::protobuf::internal::MessageTypeTraits< ::spider::FriendListRequest >, 11, false >
  friend_list_request;
static const int kFriendListResponseFieldNumber = 10006;
extern ::google::protobuf::internal::ExtensionIdentifier< ::spider::Body,
    ::google::protobuf::internal::MessageTypeTraits< ::spider::FriendListResponse >, 11, false >
  friend_list_response;
static const int kExecuteSqlRequestFieldNumber = 10007;
extern ::google::protobuf::internal::ExtensionIdentifier< ::spider::Body,
    ::google::protobuf::internal::MessageTypeTraits< ::spider::ExecuteSqlRequest >, 11, false >
  execute_sql_request;
static const int kExecuteSqlResponseFieldNumber = 10008;
extern ::google::protobuf::internal::ExtensionIdentifier< ::spider::Body,
    ::google::protobuf::internal::MessageTypeTraits< ::spider::ExecuteSqlResponse >, 11, false >
  execute_sql__response;

// ===================================================================

// SMessage

// required .spider.Header header = 10;
inline bool SMessage::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SMessage::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SMessage::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SMessage::clear_header() {
  if (header_ != NULL) header_->::spider::Header::Clear();
  clear_has_header();
}
inline const ::spider::Header& SMessage::header() const {
  // @@protoc_insertion_point(field_get:spider.SMessage.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::spider::Header* SMessage::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::spider::Header;
  // @@protoc_insertion_point(field_mutable:spider.SMessage.header)
  return header_;
}
inline ::spider::Header* SMessage::release_header() {
  clear_has_header();
  ::spider::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void SMessage::set_allocated_header(::spider::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:spider.SMessage.header)
}

// optional .spider.Body body = 20;
inline bool SMessage::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SMessage::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SMessage::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SMessage::clear_body() {
  if (body_ != NULL) body_->::spider::Body::Clear();
  clear_has_body();
}
inline const ::spider::Body& SMessage::body() const {
  // @@protoc_insertion_point(field_get:spider.SMessage.body)
  return body_ != NULL ? *body_ : *default_instance_->body_;
}
inline ::spider::Body* SMessage::mutable_body() {
  set_has_body();
  if (body_ == NULL) body_ = new ::spider::Body;
  // @@protoc_insertion_point(field_mutable:spider.SMessage.body)
  return body_;
}
inline ::spider::Body* SMessage::release_body() {
  clear_has_body();
  ::spider::Body* temp = body_;
  body_ = NULL;
  return temp;
}
inline void SMessage::set_allocated_body(::spider::Body* body) {
  delete body_;
  body_ = body;
  if (body) {
    set_has_body();
  } else {
    clear_has_body();
  }
  // @@protoc_insertion_point(field_set_allocated:spider.SMessage.body)
}

// -------------------------------------------------------------------

// Header

// required uint32 flow_no = 10;
inline bool Header::has_flow_no() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Header::set_has_flow_no() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Header::clear_has_flow_no() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Header::clear_flow_no() {
  flow_no_ = 0u;
  clear_has_flow_no();
}
inline ::google::protobuf::uint32 Header::flow_no() const {
  // @@protoc_insertion_point(field_get:spider.Header.flow_no)
  return flow_no_;
}
inline void Header::set_flow_no(::google::protobuf::uint32 value) {
  set_has_flow_no();
  flow_no_ = value;
  // @@protoc_insertion_point(field_set:spider.Header.flow_no)
}

// required uint32 src_fsm = 20;
inline bool Header::has_src_fsm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Header::set_has_src_fsm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Header::clear_has_src_fsm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Header::clear_src_fsm() {
  src_fsm_ = 0u;
  clear_has_src_fsm();
}
inline ::google::protobuf::uint32 Header::src_fsm() const {
  // @@protoc_insertion_point(field_get:spider.Header.src_fsm)
  return src_fsm_;
}
inline void Header::set_src_fsm(::google::protobuf::uint32 value) {
  set_has_src_fsm();
  src_fsm_ = value;
  // @@protoc_insertion_point(field_set:spider.Header.src_fsm)
}

// required uint32 dst_fsm = 30;
inline bool Header::has_dst_fsm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Header::set_has_dst_fsm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Header::clear_has_dst_fsm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Header::clear_dst_fsm() {
  dst_fsm_ = 0u;
  clear_has_dst_fsm();
}
inline ::google::protobuf::uint32 Header::dst_fsm() const {
  // @@protoc_insertion_point(field_get:spider.Header.dst_fsm)
  return dst_fsm_;
}
inline void Header::set_dst_fsm(::google::protobuf::uint32 value) {
  set_has_dst_fsm();
  dst_fsm_ = value;
  // @@protoc_insertion_point(field_set:spider.Header.dst_fsm)
}

// required uint32 src_state = 40;
inline bool Header::has_src_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Header::set_has_src_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Header::clear_has_src_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Header::clear_src_state() {
  src_state_ = 0u;
  clear_has_src_state();
}
inline ::google::protobuf::uint32 Header::src_state() const {
  // @@protoc_insertion_point(field_get:spider.Header.src_state)
  return src_state_;
}
inline void Header::set_src_state(::google::protobuf::uint32 value) {
  set_has_src_state();
  src_state_ = value;
  // @@protoc_insertion_point(field_set:spider.Header.src_state)
}

// required uint32 dst_state = 50;
inline bool Header::has_dst_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Header::set_has_dst_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Header::clear_has_dst_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Header::clear_dst_state() {
  dst_state_ = 0u;
  clear_has_dst_state();
}
inline ::google::protobuf::uint32 Header::dst_state() const {
  // @@protoc_insertion_point(field_get:spider.Header.dst_state)
  return dst_state_;
}
inline void Header::set_dst_state(::google::protobuf::uint32 value) {
  set_has_dst_state();
  dst_state_ = value;
  // @@protoc_insertion_point(field_set:spider.Header.dst_state)
}

// required .spider.MessageType type = 60;
inline bool Header::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Header::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Header::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Header::clear_type() {
  type_ = 10001;
  clear_has_type();
}
inline ::spider::MessageType Header::type() const {
  // @@protoc_insertion_point(field_get:spider.Header.type)
  return static_cast< ::spider::MessageType >(type_);
}
inline void Header::set_type(::spider::MessageType value) {
  assert(::spider::MessageType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:spider.Header.type)
}

// -------------------------------------------------------------------

// Body

// -------------------------------------------------------------------

// Response

// required int32 retcode = 10;
inline bool Response::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 Response::retcode() const {
  // @@protoc_insertion_point(field_get:spider.Response.retcode)
  return retcode_;
}
inline void Response::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
  // @@protoc_insertion_point(field_set:spider.Response.retcode)
}

// optional string error_msg = 20;
inline bool Response::has_error_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::set_has_error_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response::clear_has_error_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response::clear_error_msg() {
  if (error_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_msg_->clear();
  }
  clear_has_error_msg();
}
inline const ::std::string& Response::error_msg() const {
  // @@protoc_insertion_point(field_get:spider.Response.error_msg)
  return *error_msg_;
}
inline void Response::set_error_msg(const ::std::string& value) {
  set_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_msg_ = new ::std::string;
  }
  error_msg_->assign(value);
  // @@protoc_insertion_point(field_set:spider.Response.error_msg)
}
inline void Response::set_error_msg(const char* value) {
  set_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_msg_ = new ::std::string;
  }
  error_msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:spider.Response.error_msg)
}
inline void Response::set_error_msg(const char* value, size_t size) {
  set_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_msg_ = new ::std::string;
  }
  error_msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spider.Response.error_msg)
}
inline ::std::string* Response::mutable_error_msg() {
  set_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spider.Response.error_msg)
  return error_msg_;
}
inline ::std::string* Response::release_error_msg() {
  clear_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = error_msg_;
    error_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Response::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_msg_;
  }
  if (error_msg) {
    set_has_error_msg();
    error_msg_ = error_msg;
  } else {
    clear_has_error_msg();
    error_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spider.Response.error_msg)
}

// -------------------------------------------------------------------

// HeartBeatRequest

// -------------------------------------------------------------------

// HeartBeatResponse

// required .spider.Response rc = 10;
inline bool HeartBeatResponse::has_rc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeartBeatResponse::set_has_rc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeartBeatResponse::clear_has_rc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeartBeatResponse::clear_rc() {
  if (rc_ != NULL) rc_->::spider::Response::Clear();
  clear_has_rc();
}
inline const ::spider::Response& HeartBeatResponse::rc() const {
  // @@protoc_insertion_point(field_get:spider.HeartBeatResponse.rc)
  return rc_ != NULL ? *rc_ : *default_instance_->rc_;
}
inline ::spider::Response* HeartBeatResponse::mutable_rc() {
  set_has_rc();
  if (rc_ == NULL) rc_ = new ::spider::Response;
  // @@protoc_insertion_point(field_mutable:spider.HeartBeatResponse.rc)
  return rc_;
}
inline ::spider::Response* HeartBeatResponse::release_rc() {
  clear_has_rc();
  ::spider::Response* temp = rc_;
  rc_ = NULL;
  return temp;
}
inline void HeartBeatResponse::set_allocated_rc(::spider::Response* rc) {
  delete rc_;
  rc_ = rc;
  if (rc) {
    set_has_rc();
  } else {
    clear_has_rc();
  }
  // @@protoc_insertion_point(field_set_allocated:spider.HeartBeatResponse.rc)
}

// -------------------------------------------------------------------

// LoginRequest

// required string login_name = 10;
inline bool LoginRequest::has_login_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRequest::set_has_login_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRequest::clear_has_login_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRequest::clear_login_name() {
  if (login_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_name_->clear();
  }
  clear_has_login_name();
}
inline const ::std::string& LoginRequest::login_name() const {
  // @@protoc_insertion_point(field_get:spider.LoginRequest.login_name)
  return *login_name_;
}
inline void LoginRequest::set_login_name(const ::std::string& value) {
  set_has_login_name();
  if (login_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_name_ = new ::std::string;
  }
  login_name_->assign(value);
  // @@protoc_insertion_point(field_set:spider.LoginRequest.login_name)
}
inline void LoginRequest::set_login_name(const char* value) {
  set_has_login_name();
  if (login_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_name_ = new ::std::string;
  }
  login_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:spider.LoginRequest.login_name)
}
inline void LoginRequest::set_login_name(const char* value, size_t size) {
  set_has_login_name();
  if (login_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_name_ = new ::std::string;
  }
  login_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spider.LoginRequest.login_name)
}
inline ::std::string* LoginRequest::mutable_login_name() {
  set_has_login_name();
  if (login_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spider.LoginRequest.login_name)
  return login_name_;
}
inline ::std::string* LoginRequest::release_login_name() {
  clear_has_login_name();
  if (login_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = login_name_;
    login_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginRequest::set_allocated_login_name(::std::string* login_name) {
  if (login_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete login_name_;
  }
  if (login_name) {
    set_has_login_name();
    login_name_ = login_name;
  } else {
    clear_has_login_name();
    login_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spider.LoginRequest.login_name)
}

// required string passwd = 20;
inline bool LoginRequest::has_passwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRequest::set_has_passwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRequest::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRequest::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& LoginRequest::passwd() const {
  // @@protoc_insertion_point(field_get:spider.LoginRequest.passwd)
  return *passwd_;
}
inline void LoginRequest::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set:spider.LoginRequest.passwd)
}
inline void LoginRequest::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:spider.LoginRequest.passwd)
}
inline void LoginRequest::set_passwd(const char* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spider.LoginRequest.passwd)
}
inline ::std::string* LoginRequest::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spider.LoginRequest.passwd)
  return passwd_;
}
inline ::std::string* LoginRequest::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginRequest::set_allocated_passwd(::std::string* passwd) {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passwd_;
  }
  if (passwd) {
    set_has_passwd();
    passwd_ = passwd;
  } else {
    clear_has_passwd();
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spider.LoginRequest.passwd)
}

// -------------------------------------------------------------------

// LoginResponse

// required .spider.Response rc = 10;
inline bool LoginResponse::has_rc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginResponse::set_has_rc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginResponse::clear_has_rc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginResponse::clear_rc() {
  if (rc_ != NULL) rc_->::spider::Response::Clear();
  clear_has_rc();
}
inline const ::spider::Response& LoginResponse::rc() const {
  // @@protoc_insertion_point(field_get:spider.LoginResponse.rc)
  return rc_ != NULL ? *rc_ : *default_instance_->rc_;
}
inline ::spider::Response* LoginResponse::mutable_rc() {
  set_has_rc();
  if (rc_ == NULL) rc_ = new ::spider::Response;
  // @@protoc_insertion_point(field_mutable:spider.LoginResponse.rc)
  return rc_;
}
inline ::spider::Response* LoginResponse::release_rc() {
  clear_has_rc();
  ::spider::Response* temp = rc_;
  rc_ = NULL;
  return temp;
}
inline void LoginResponse::set_allocated_rc(::spider::Response* rc) {
  delete rc_;
  rc_ = rc;
  if (rc) {
    set_has_rc();
  } else {
    clear_has_rc();
  }
  // @@protoc_insertion_point(field_set_allocated:spider.LoginResponse.rc)
}

// -------------------------------------------------------------------

// FriendListRequest

// required string login_name = 10;
inline bool FriendListRequest::has_login_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendListRequest::set_has_login_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendListRequest::clear_has_login_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendListRequest::clear_login_name() {
  if (login_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_name_->clear();
  }
  clear_has_login_name();
}
inline const ::std::string& FriendListRequest::login_name() const {
  // @@protoc_insertion_point(field_get:spider.FriendListRequest.login_name)
  return *login_name_;
}
inline void FriendListRequest::set_login_name(const ::std::string& value) {
  set_has_login_name();
  if (login_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_name_ = new ::std::string;
  }
  login_name_->assign(value);
  // @@protoc_insertion_point(field_set:spider.FriendListRequest.login_name)
}
inline void FriendListRequest::set_login_name(const char* value) {
  set_has_login_name();
  if (login_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_name_ = new ::std::string;
  }
  login_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:spider.FriendListRequest.login_name)
}
inline void FriendListRequest::set_login_name(const char* value, size_t size) {
  set_has_login_name();
  if (login_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_name_ = new ::std::string;
  }
  login_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spider.FriendListRequest.login_name)
}
inline ::std::string* FriendListRequest::mutable_login_name() {
  set_has_login_name();
  if (login_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spider.FriendListRequest.login_name)
  return login_name_;
}
inline ::std::string* FriendListRequest::release_login_name() {
  clear_has_login_name();
  if (login_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = login_name_;
    login_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FriendListRequest::set_allocated_login_name(::std::string* login_name) {
  if (login_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete login_name_;
  }
  if (login_name) {
    set_has_login_name();
    login_name_ = login_name;
  } else {
    clear_has_login_name();
    login_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spider.FriendListRequest.login_name)
}

// -------------------------------------------------------------------

// FriendListResponse

// required .spider.Response rc = 10;
inline bool FriendListResponse::has_rc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendListResponse::set_has_rc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendListResponse::clear_has_rc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendListResponse::clear_rc() {
  if (rc_ != NULL) rc_->::spider::Response::Clear();
  clear_has_rc();
}
inline const ::spider::Response& FriendListResponse::rc() const {
  // @@protoc_insertion_point(field_get:spider.FriendListResponse.rc)
  return rc_ != NULL ? *rc_ : *default_instance_->rc_;
}
inline ::spider::Response* FriendListResponse::mutable_rc() {
  set_has_rc();
  if (rc_ == NULL) rc_ = new ::spider::Response;
  // @@protoc_insertion_point(field_mutable:spider.FriendListResponse.rc)
  return rc_;
}
inline ::spider::Response* FriendListResponse::release_rc() {
  clear_has_rc();
  ::spider::Response* temp = rc_;
  rc_ = NULL;
  return temp;
}
inline void FriendListResponse::set_allocated_rc(::spider::Response* rc) {
  delete rc_;
  rc_ = rc;
  if (rc) {
    set_has_rc();
  } else {
    clear_has_rc();
  }
  // @@protoc_insertion_point(field_set_allocated:spider.FriendListResponse.rc)
}

// repeated string friend_list = 20;
inline int FriendListResponse::friend_list_size() const {
  return friend_list_.size();
}
inline void FriendListResponse::clear_friend_list() {
  friend_list_.Clear();
}
inline const ::std::string& FriendListResponse::friend_list(int index) const {
  // @@protoc_insertion_point(field_get:spider.FriendListResponse.friend_list)
  return friend_list_.Get(index);
}
inline ::std::string* FriendListResponse::mutable_friend_list(int index) {
  // @@protoc_insertion_point(field_mutable:spider.FriendListResponse.friend_list)
  return friend_list_.Mutable(index);
}
inline void FriendListResponse::set_friend_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:spider.FriendListResponse.friend_list)
  friend_list_.Mutable(index)->assign(value);
}
inline void FriendListResponse::set_friend_list(int index, const char* value) {
  friend_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:spider.FriendListResponse.friend_list)
}
inline void FriendListResponse::set_friend_list(int index, const char* value, size_t size) {
  friend_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spider.FriendListResponse.friend_list)
}
inline ::std::string* FriendListResponse::add_friend_list() {
  return friend_list_.Add();
}
inline void FriendListResponse::add_friend_list(const ::std::string& value) {
  friend_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:spider.FriendListResponse.friend_list)
}
inline void FriendListResponse::add_friend_list(const char* value) {
  friend_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:spider.FriendListResponse.friend_list)
}
inline void FriendListResponse::add_friend_list(const char* value, size_t size) {
  friend_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:spider.FriendListResponse.friend_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FriendListResponse::friend_list() const {
  // @@protoc_insertion_point(field_list:spider.FriendListResponse.friend_list)
  return friend_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FriendListResponse::mutable_friend_list() {
  // @@protoc_insertion_point(field_mutable_list:spider.FriendListResponse.friend_list)
  return &friend_list_;
}

// -------------------------------------------------------------------

// MysqlRow

// repeated string column = 10;
inline int MysqlRow::column_size() const {
  return column_.size();
}
inline void MysqlRow::clear_column() {
  column_.Clear();
}
inline const ::std::string& MysqlRow::column(int index) const {
  // @@protoc_insertion_point(field_get:spider.MysqlRow.column)
  return column_.Get(index);
}
inline ::std::string* MysqlRow::mutable_column(int index) {
  // @@protoc_insertion_point(field_mutable:spider.MysqlRow.column)
  return column_.Mutable(index);
}
inline void MysqlRow::set_column(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:spider.MysqlRow.column)
  column_.Mutable(index)->assign(value);
}
inline void MysqlRow::set_column(int index, const char* value) {
  column_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:spider.MysqlRow.column)
}
inline void MysqlRow::set_column(int index, const char* value, size_t size) {
  column_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spider.MysqlRow.column)
}
inline ::std::string* MysqlRow::add_column() {
  return column_.Add();
}
inline void MysqlRow::add_column(const ::std::string& value) {
  column_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:spider.MysqlRow.column)
}
inline void MysqlRow::add_column(const char* value) {
  column_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:spider.MysqlRow.column)
}
inline void MysqlRow::add_column(const char* value, size_t size) {
  column_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:spider.MysqlRow.column)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MysqlRow::column() const {
  // @@protoc_insertion_point(field_list:spider.MysqlRow.column)
  return column_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MysqlRow::mutable_column() {
  // @@protoc_insertion_point(field_mutable_list:spider.MysqlRow.column)
  return &column_;
}

// -------------------------------------------------------------------

// ExecuteSqlRequest

// required string db_name = 10;
inline bool ExecuteSqlRequest::has_db_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExecuteSqlRequest::set_has_db_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExecuteSqlRequest::clear_has_db_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExecuteSqlRequest::clear_db_name() {
  if (db_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    db_name_->clear();
  }
  clear_has_db_name();
}
inline const ::std::string& ExecuteSqlRequest::db_name() const {
  // @@protoc_insertion_point(field_get:spider.ExecuteSqlRequest.db_name)
  return *db_name_;
}
inline void ExecuteSqlRequest::set_db_name(const ::std::string& value) {
  set_has_db_name();
  if (db_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    db_name_ = new ::std::string;
  }
  db_name_->assign(value);
  // @@protoc_insertion_point(field_set:spider.ExecuteSqlRequest.db_name)
}
inline void ExecuteSqlRequest::set_db_name(const char* value) {
  set_has_db_name();
  if (db_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    db_name_ = new ::std::string;
  }
  db_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:spider.ExecuteSqlRequest.db_name)
}
inline void ExecuteSqlRequest::set_db_name(const char* value, size_t size) {
  set_has_db_name();
  if (db_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    db_name_ = new ::std::string;
  }
  db_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spider.ExecuteSqlRequest.db_name)
}
inline ::std::string* ExecuteSqlRequest::mutable_db_name() {
  set_has_db_name();
  if (db_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    db_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spider.ExecuteSqlRequest.db_name)
  return db_name_;
}
inline ::std::string* ExecuteSqlRequest::release_db_name() {
  clear_has_db_name();
  if (db_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = db_name_;
    db_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ExecuteSqlRequest::set_allocated_db_name(::std::string* db_name) {
  if (db_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete db_name_;
  }
  if (db_name) {
    set_has_db_name();
    db_name_ = db_name;
  } else {
    clear_has_db_name();
    db_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spider.ExecuteSqlRequest.db_name)
}

// required string sql = 20;
inline bool ExecuteSqlRequest::has_sql() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExecuteSqlRequest::set_has_sql() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExecuteSqlRequest::clear_has_sql() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExecuteSqlRequest::clear_sql() {
  if (sql_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_->clear();
  }
  clear_has_sql();
}
inline const ::std::string& ExecuteSqlRequest::sql() const {
  // @@protoc_insertion_point(field_get:spider.ExecuteSqlRequest.sql)
  return *sql_;
}
inline void ExecuteSqlRequest::set_sql(const ::std::string& value) {
  set_has_sql();
  if (sql_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_ = new ::std::string;
  }
  sql_->assign(value);
  // @@protoc_insertion_point(field_set:spider.ExecuteSqlRequest.sql)
}
inline void ExecuteSqlRequest::set_sql(const char* value) {
  set_has_sql();
  if (sql_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_ = new ::std::string;
  }
  sql_->assign(value);
  // @@protoc_insertion_point(field_set_char:spider.ExecuteSqlRequest.sql)
}
inline void ExecuteSqlRequest::set_sql(const char* value, size_t size) {
  set_has_sql();
  if (sql_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_ = new ::std::string;
  }
  sql_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spider.ExecuteSqlRequest.sql)
}
inline ::std::string* ExecuteSqlRequest::mutable_sql() {
  set_has_sql();
  if (sql_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spider.ExecuteSqlRequest.sql)
  return sql_;
}
inline ::std::string* ExecuteSqlRequest::release_sql() {
  clear_has_sql();
  if (sql_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sql_;
    sql_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ExecuteSqlRequest::set_allocated_sql(::std::string* sql) {
  if (sql_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sql_;
  }
  if (sql) {
    set_has_sql();
    sql_ = sql;
  } else {
    clear_has_sql();
    sql_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spider.ExecuteSqlRequest.sql)
}

// -------------------------------------------------------------------

// ExecuteSqlResponse

// required .spider.Response rc = 10;
inline bool ExecuteSqlResponse::has_rc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExecuteSqlResponse::set_has_rc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExecuteSqlResponse::clear_has_rc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExecuteSqlResponse::clear_rc() {
  if (rc_ != NULL) rc_->::spider::Response::Clear();
  clear_has_rc();
}
inline const ::spider::Response& ExecuteSqlResponse::rc() const {
  // @@protoc_insertion_point(field_get:spider.ExecuteSqlResponse.rc)
  return rc_ != NULL ? *rc_ : *default_instance_->rc_;
}
inline ::spider::Response* ExecuteSqlResponse::mutable_rc() {
  set_has_rc();
  if (rc_ == NULL) rc_ = new ::spider::Response;
  // @@protoc_insertion_point(field_mutable:spider.ExecuteSqlResponse.rc)
  return rc_;
}
inline ::spider::Response* ExecuteSqlResponse::release_rc() {
  clear_has_rc();
  ::spider::Response* temp = rc_;
  rc_ = NULL;
  return temp;
}
inline void ExecuteSqlResponse::set_allocated_rc(::spider::Response* rc) {
  delete rc_;
  rc_ = rc;
  if (rc) {
    set_has_rc();
  } else {
    clear_has_rc();
  }
  // @@protoc_insertion_point(field_set_allocated:spider.ExecuteSqlResponse.rc)
}

// repeated .spider.MysqlRow row = 20;
inline int ExecuteSqlResponse::row_size() const {
  return row_.size();
}
inline void ExecuteSqlResponse::clear_row() {
  row_.Clear();
}
inline const ::spider::MysqlRow& ExecuteSqlResponse::row(int index) const {
  // @@protoc_insertion_point(field_get:spider.ExecuteSqlResponse.row)
  return row_.Get(index);
}
inline ::spider::MysqlRow* ExecuteSqlResponse::mutable_row(int index) {
  // @@protoc_insertion_point(field_mutable:spider.ExecuteSqlResponse.row)
  return row_.Mutable(index);
}
inline ::spider::MysqlRow* ExecuteSqlResponse::add_row() {
  // @@protoc_insertion_point(field_add:spider.ExecuteSqlResponse.row)
  return row_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spider::MysqlRow >&
ExecuteSqlResponse::row() const {
  // @@protoc_insertion_point(field_list:spider.ExecuteSqlResponse.row)
  return row_;
}
inline ::google::protobuf::RepeatedPtrField< ::spider::MysqlRow >*
ExecuteSqlResponse::mutable_row() {
  // @@protoc_insertion_point(field_mutable_list:spider.ExecuteSqlResponse.row)
  return &row_;
}

// optional uint32 insert_id = 30;
inline bool ExecuteSqlResponse::has_insert_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExecuteSqlResponse::set_has_insert_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExecuteSqlResponse::clear_has_insert_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExecuteSqlResponse::clear_insert_id() {
  insert_id_ = 0u;
  clear_has_insert_id();
}
inline ::google::protobuf::uint32 ExecuteSqlResponse::insert_id() const {
  // @@protoc_insertion_point(field_get:spider.ExecuteSqlResponse.insert_id)
  return insert_id_;
}
inline void ExecuteSqlResponse::set_insert_id(::google::protobuf::uint32 value) {
  set_has_insert_id();
  insert_id_ = value;
  // @@protoc_insertion_point(field_set:spider.ExecuteSqlResponse.insert_id)
}

// optional uint32 affected_rows = 40;
inline bool ExecuteSqlResponse::has_affected_rows() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExecuteSqlResponse::set_has_affected_rows() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ExecuteSqlResponse::clear_has_affected_rows() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ExecuteSqlResponse::clear_affected_rows() {
  affected_rows_ = 0u;
  clear_has_affected_rows();
}
inline ::google::protobuf::uint32 ExecuteSqlResponse::affected_rows() const {
  // @@protoc_insertion_point(field_get:spider.ExecuteSqlResponse.affected_rows)
  return affected_rows_;
}
inline void ExecuteSqlResponse::set_affected_rows(::google::protobuf::uint32 value) {
  set_has_affected_rows();
  affected_rows_ = value;
  // @@protoc_insertion_point(field_set:spider.ExecuteSqlResponse.affected_rows)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace spider

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::spider::MessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::spider::MessageType>() {
  return ::spider::MessageType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
