// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_message_2eproto();
void protobuf_AssignDesc_message_2eproto();
void protobuf_ShutdownFile_message_2eproto();

class Message;
class Header;
class Body;
class Response;
class LoginRequest;
class LoginResponse;
class FriendListRequest;
class FriendListResponse;

enum MessageType {
  LOGIN_REQUEST = 10001,
  LOGIN_RESPONSE = 10002,
  FRIEND_LIST_REQUEST = 10003,
  FRIEND_LIST_RESPONSE = 10004
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = LOGIN_REQUEST;
const MessageType MessageType_MAX = FRIEND_LIST_RESPONSE;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor();
inline const ::std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageType_descriptor(), value);
}
inline bool MessageType_Parse(
    const ::std::string& name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================

class Message : public ::google::protobuf::Message {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  void Swap(Message* other);

  // implements Message ----------------------------------------------

  Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .message.Header header = 10;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 10;
  inline const ::message::Header& header() const;
  inline ::message::Header* mutable_header();
  inline ::message::Header* release_header();
  inline void set_allocated_header(::message::Header* header);

  // required .message.Body body = 20;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 20;
  inline const ::message::Body& body() const;
  inline ::message::Body* mutable_body();
  inline ::message::Body* release_body();
  inline void set_allocated_body(::message::Body* body);

  // @@protoc_insertion_point(class_scope:message.Message)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_body();
  inline void clear_has_body();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::message::Header* header_;
  ::message::Body* body_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// -------------------------------------------------------------------

class Header : public ::google::protobuf::Message {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  void Swap(Header* other);

  // implements Message ----------------------------------------------

  Header* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .message.MessageType type = 10;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 10;
  inline ::message::MessageType type() const;
  inline void set_type(::message::MessageType value);

  // required string flow_no = 20;
  inline bool has_flow_no() const;
  inline void clear_flow_no();
  static const int kFlowNoFieldNumber = 20;
  inline const ::std::string& flow_no() const;
  inline void set_flow_no(const ::std::string& value);
  inline void set_flow_no(const char* value);
  inline void set_flow_no(const char* value, size_t size);
  inline ::std::string* mutable_flow_no();
  inline ::std::string* release_flow_no();
  inline void set_allocated_flow_no(::std::string* flow_no);

  // optional uint32 length = 30;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 30;
  inline ::google::protobuf::uint32 length() const;
  inline void set_length(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:message.Header)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_flow_no();
  inline void clear_has_flow_no();
  inline void set_has_length();
  inline void clear_has_length();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* flow_no_;
  int type_;
  ::google::protobuf::uint32 length_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Header* default_instance_;
};
// -------------------------------------------------------------------

class Body : public ::google::protobuf::Message {
 public:
  Body();
  virtual ~Body();

  Body(const Body& from);

  inline Body& operator=(const Body& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Body& default_instance();

  void Swap(Body* other);

  // implements Message ----------------------------------------------

  Body* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Body& from);
  void MergeFrom(const Body& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .message.LoginRequest login_request = 10001;
  inline bool has_login_request() const;
  inline void clear_login_request();
  static const int kLoginRequestFieldNumber = 10001;
  inline const ::message::LoginRequest& login_request() const;
  inline ::message::LoginRequest* mutable_login_request();
  inline ::message::LoginRequest* release_login_request();
  inline void set_allocated_login_request(::message::LoginRequest* login_request);

  // optional .message.LoginResponse login_response = 10002;
  inline bool has_login_response() const;
  inline void clear_login_response();
  static const int kLoginResponseFieldNumber = 10002;
  inline const ::message::LoginResponse& login_response() const;
  inline ::message::LoginResponse* mutable_login_response();
  inline ::message::LoginResponse* release_login_response();
  inline void set_allocated_login_response(::message::LoginResponse* login_response);

  // optional .message.FriendListRequest friend_list_request = 10003;
  inline bool has_friend_list_request() const;
  inline void clear_friend_list_request();
  static const int kFriendListRequestFieldNumber = 10003;
  inline const ::message::FriendListRequest& friend_list_request() const;
  inline ::message::FriendListRequest* mutable_friend_list_request();
  inline ::message::FriendListRequest* release_friend_list_request();
  inline void set_allocated_friend_list_request(::message::FriendListRequest* friend_list_request);

  // optional .message.FriendListResponse friend_list_response = 10004;
  inline bool has_friend_list_response() const;
  inline void clear_friend_list_response();
  static const int kFriendListResponseFieldNumber = 10004;
  inline const ::message::FriendListResponse& friend_list_response() const;
  inline ::message::FriendListResponse* mutable_friend_list_response();
  inline ::message::FriendListResponse* release_friend_list_response();
  inline void set_allocated_friend_list_response(::message::FriendListResponse* friend_list_response);

  // @@protoc_insertion_point(class_scope:message.Body)
 private:
  inline void set_has_login_request();
  inline void clear_has_login_request();
  inline void set_has_login_response();
  inline void clear_has_login_response();
  inline void set_has_friend_list_request();
  inline void clear_has_friend_list_request();
  inline void set_has_friend_list_response();
  inline void clear_has_friend_list_response();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::message::LoginRequest* login_request_;
  ::message::LoginResponse* login_response_;
  ::message::FriendListRequest* friend_list_request_;
  ::message::FriendListResponse* friend_list_response_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Body* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 retcode = 10;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 10;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // optional string error_msg = 20;
  inline bool has_error_msg() const;
  inline void clear_error_msg();
  static const int kErrorMsgFieldNumber = 20;
  inline const ::std::string& error_msg() const;
  inline void set_error_msg(const ::std::string& value);
  inline void set_error_msg(const char* value);
  inline void set_error_msg(const char* value, size_t size);
  inline ::std::string* mutable_error_msg();
  inline ::std::string* release_error_msg();
  inline void set_allocated_error_msg(::std::string* error_msg);

  // @@protoc_insertion_point(class_scope:message.Response)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_error_msg();
  inline void clear_has_error_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* error_msg_;
  ::google::protobuf::int32 retcode_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// -------------------------------------------------------------------

class LoginRequest : public ::google::protobuf::Message {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRequest& default_instance();

  void Swap(LoginRequest* other);

  // implements Message ----------------------------------------------

  LoginRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string login_name = 10;
  inline bool has_login_name() const;
  inline void clear_login_name();
  static const int kLoginNameFieldNumber = 10;
  inline const ::std::string& login_name() const;
  inline void set_login_name(const ::std::string& value);
  inline void set_login_name(const char* value);
  inline void set_login_name(const char* value, size_t size);
  inline ::std::string* mutable_login_name();
  inline ::std::string* release_login_name();
  inline void set_allocated_login_name(::std::string* login_name);

  // required string passwd = 20;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 20;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const char* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  inline void set_allocated_passwd(::std::string* passwd);

  // @@protoc_insertion_point(class_scope:message.LoginRequest)
 private:
  inline void set_has_login_name();
  inline void clear_has_login_name();
  inline void set_has_passwd();
  inline void clear_has_passwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* login_name_;
  ::std::string* passwd_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static LoginRequest* default_instance_;
};
// -------------------------------------------------------------------

class LoginResponse : public ::google::protobuf::Message {
 public:
  LoginResponse();
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginResponse& default_instance();

  void Swap(LoginResponse* other);

  // implements Message ----------------------------------------------

  LoginResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .message.Response rc = 10;
  inline bool has_rc() const;
  inline void clear_rc();
  static const int kRcFieldNumber = 10;
  inline const ::message::Response& rc() const;
  inline ::message::Response* mutable_rc();
  inline ::message::Response* release_rc();
  inline void set_allocated_rc(::message::Response* rc);

  // @@protoc_insertion_point(class_scope:message.LoginResponse)
 private:
  inline void set_has_rc();
  inline void clear_has_rc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::message::Response* rc_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static LoginResponse* default_instance_;
};
// -------------------------------------------------------------------

class FriendListRequest : public ::google::protobuf::Message {
 public:
  FriendListRequest();
  virtual ~FriendListRequest();

  FriendListRequest(const FriendListRequest& from);

  inline FriendListRequest& operator=(const FriendListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendListRequest& default_instance();

  void Swap(FriendListRequest* other);

  // implements Message ----------------------------------------------

  FriendListRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendListRequest& from);
  void MergeFrom(const FriendListRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string login_name = 10;
  inline bool has_login_name() const;
  inline void clear_login_name();
  static const int kLoginNameFieldNumber = 10;
  inline const ::std::string& login_name() const;
  inline void set_login_name(const ::std::string& value);
  inline void set_login_name(const char* value);
  inline void set_login_name(const char* value, size_t size);
  inline ::std::string* mutable_login_name();
  inline ::std::string* release_login_name();
  inline void set_allocated_login_name(::std::string* login_name);

  // @@protoc_insertion_point(class_scope:message.FriendListRequest)
 private:
  inline void set_has_login_name();
  inline void clear_has_login_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* login_name_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static FriendListRequest* default_instance_;
};
// -------------------------------------------------------------------

class FriendListResponse : public ::google::protobuf::Message {
 public:
  FriendListResponse();
  virtual ~FriendListResponse();

  FriendListResponse(const FriendListResponse& from);

  inline FriendListResponse& operator=(const FriendListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendListResponse& default_instance();

  void Swap(FriendListResponse* other);

  // implements Message ----------------------------------------------

  FriendListResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendListResponse& from);
  void MergeFrom(const FriendListResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .message.Response rc = 10;
  inline bool has_rc() const;
  inline void clear_rc();
  static const int kRcFieldNumber = 10;
  inline const ::message::Response& rc() const;
  inline ::message::Response* mutable_rc();
  inline ::message::Response* release_rc();
  inline void set_allocated_rc(::message::Response* rc);

  // repeated string friend_list = 20;
  inline int friend_list_size() const;
  inline void clear_friend_list();
  static const int kFriendListFieldNumber = 20;
  inline const ::std::string& friend_list(int index) const;
  inline ::std::string* mutable_friend_list(int index);
  inline void set_friend_list(int index, const ::std::string& value);
  inline void set_friend_list(int index, const char* value);
  inline void set_friend_list(int index, const char* value, size_t size);
  inline ::std::string* add_friend_list();
  inline void add_friend_list(const ::std::string& value);
  inline void add_friend_list(const char* value);
  inline void add_friend_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& friend_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_friend_list();

  // @@protoc_insertion_point(class_scope:message.FriendListResponse)
 private:
  inline void set_has_rc();
  inline void clear_has_rc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::message::Response* rc_;
  ::google::protobuf::RepeatedPtrField< ::std::string> friend_list_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static FriendListResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// Message

// required .message.Header header = 10;
inline bool Message::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message::clear_header() {
  if (header_ != NULL) header_->::message::Header::Clear();
  clear_has_header();
}
inline const ::message::Header& Message::header() const {
  // @@protoc_insertion_point(field_get:message.Message.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::message::Header* Message::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::message::Header;
  // @@protoc_insertion_point(field_mutable:message.Message.header)
  return header_;
}
inline ::message::Header* Message::release_header() {
  clear_has_header();
  ::message::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Message::set_allocated_header(::message::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:message.Message.header)
}

// required .message.Body body = 20;
inline bool Message::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message::clear_body() {
  if (body_ != NULL) body_->::message::Body::Clear();
  clear_has_body();
}
inline const ::message::Body& Message::body() const {
  // @@protoc_insertion_point(field_get:message.Message.body)
  return body_ != NULL ? *body_ : *default_instance_->body_;
}
inline ::message::Body* Message::mutable_body() {
  set_has_body();
  if (body_ == NULL) body_ = new ::message::Body;
  // @@protoc_insertion_point(field_mutable:message.Message.body)
  return body_;
}
inline ::message::Body* Message::release_body() {
  clear_has_body();
  ::message::Body* temp = body_;
  body_ = NULL;
  return temp;
}
inline void Message::set_allocated_body(::message::Body* body) {
  delete body_;
  body_ = body;
  if (body) {
    set_has_body();
  } else {
    clear_has_body();
  }
  // @@protoc_insertion_point(field_set_allocated:message.Message.body)
}

// -------------------------------------------------------------------

// Header

// required .message.MessageType type = 10;
inline bool Header::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Header::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Header::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Header::clear_type() {
  type_ = 10001;
  clear_has_type();
}
inline ::message::MessageType Header::type() const {
  // @@protoc_insertion_point(field_get:message.Header.type)
  return static_cast< ::message::MessageType >(type_);
}
inline void Header::set_type(::message::MessageType value) {
  assert(::message::MessageType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:message.Header.type)
}

// required string flow_no = 20;
inline bool Header::has_flow_no() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Header::set_has_flow_no() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Header::clear_has_flow_no() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Header::clear_flow_no() {
  if (flow_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flow_no_->clear();
  }
  clear_has_flow_no();
}
inline const ::std::string& Header::flow_no() const {
  // @@protoc_insertion_point(field_get:message.Header.flow_no)
  return *flow_no_;
}
inline void Header::set_flow_no(const ::std::string& value) {
  set_has_flow_no();
  if (flow_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flow_no_ = new ::std::string;
  }
  flow_no_->assign(value);
  // @@protoc_insertion_point(field_set:message.Header.flow_no)
}
inline void Header::set_flow_no(const char* value) {
  set_has_flow_no();
  if (flow_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flow_no_ = new ::std::string;
  }
  flow_no_->assign(value);
  // @@protoc_insertion_point(field_set_char:message.Header.flow_no)
}
inline void Header::set_flow_no(const char* value, size_t size) {
  set_has_flow_no();
  if (flow_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flow_no_ = new ::std::string;
  }
  flow_no_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:message.Header.flow_no)
}
inline ::std::string* Header::mutable_flow_no() {
  set_has_flow_no();
  if (flow_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flow_no_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:message.Header.flow_no)
  return flow_no_;
}
inline ::std::string* Header::release_flow_no() {
  clear_has_flow_no();
  if (flow_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = flow_no_;
    flow_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Header::set_allocated_flow_no(::std::string* flow_no) {
  if (flow_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete flow_no_;
  }
  if (flow_no) {
    set_has_flow_no();
    flow_no_ = flow_no;
  } else {
    clear_has_flow_no();
    flow_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:message.Header.flow_no)
}

// optional uint32 length = 30;
inline bool Header::has_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Header::set_has_length() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Header::clear_has_length() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Header::clear_length() {
  length_ = 0u;
  clear_has_length();
}
inline ::google::protobuf::uint32 Header::length() const {
  // @@protoc_insertion_point(field_get:message.Header.length)
  return length_;
}
inline void Header::set_length(::google::protobuf::uint32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:message.Header.length)
}

// -------------------------------------------------------------------

// Body

// optional .message.LoginRequest login_request = 10001;
inline bool Body::has_login_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Body::set_has_login_request() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Body::clear_has_login_request() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Body::clear_login_request() {
  if (login_request_ != NULL) login_request_->::message::LoginRequest::Clear();
  clear_has_login_request();
}
inline const ::message::LoginRequest& Body::login_request() const {
  // @@protoc_insertion_point(field_get:message.Body.login_request)
  return login_request_ != NULL ? *login_request_ : *default_instance_->login_request_;
}
inline ::message::LoginRequest* Body::mutable_login_request() {
  set_has_login_request();
  if (login_request_ == NULL) login_request_ = new ::message::LoginRequest;
  // @@protoc_insertion_point(field_mutable:message.Body.login_request)
  return login_request_;
}
inline ::message::LoginRequest* Body::release_login_request() {
  clear_has_login_request();
  ::message::LoginRequest* temp = login_request_;
  login_request_ = NULL;
  return temp;
}
inline void Body::set_allocated_login_request(::message::LoginRequest* login_request) {
  delete login_request_;
  login_request_ = login_request;
  if (login_request) {
    set_has_login_request();
  } else {
    clear_has_login_request();
  }
  // @@protoc_insertion_point(field_set_allocated:message.Body.login_request)
}

// optional .message.LoginResponse login_response = 10002;
inline bool Body::has_login_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Body::set_has_login_response() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Body::clear_has_login_response() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Body::clear_login_response() {
  if (login_response_ != NULL) login_response_->::message::LoginResponse::Clear();
  clear_has_login_response();
}
inline const ::message::LoginResponse& Body::login_response() const {
  // @@protoc_insertion_point(field_get:message.Body.login_response)
  return login_response_ != NULL ? *login_response_ : *default_instance_->login_response_;
}
inline ::message::LoginResponse* Body::mutable_login_response() {
  set_has_login_response();
  if (login_response_ == NULL) login_response_ = new ::message::LoginResponse;
  // @@protoc_insertion_point(field_mutable:message.Body.login_response)
  return login_response_;
}
inline ::message::LoginResponse* Body::release_login_response() {
  clear_has_login_response();
  ::message::LoginResponse* temp = login_response_;
  login_response_ = NULL;
  return temp;
}
inline void Body::set_allocated_login_response(::message::LoginResponse* login_response) {
  delete login_response_;
  login_response_ = login_response;
  if (login_response) {
    set_has_login_response();
  } else {
    clear_has_login_response();
  }
  // @@protoc_insertion_point(field_set_allocated:message.Body.login_response)
}

// optional .message.FriendListRequest friend_list_request = 10003;
inline bool Body::has_friend_list_request() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Body::set_has_friend_list_request() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Body::clear_has_friend_list_request() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Body::clear_friend_list_request() {
  if (friend_list_request_ != NULL) friend_list_request_->::message::FriendListRequest::Clear();
  clear_has_friend_list_request();
}
inline const ::message::FriendListRequest& Body::friend_list_request() const {
  // @@protoc_insertion_point(field_get:message.Body.friend_list_request)
  return friend_list_request_ != NULL ? *friend_list_request_ : *default_instance_->friend_list_request_;
}
inline ::message::FriendListRequest* Body::mutable_friend_list_request() {
  set_has_friend_list_request();
  if (friend_list_request_ == NULL) friend_list_request_ = new ::message::FriendListRequest;
  // @@protoc_insertion_point(field_mutable:message.Body.friend_list_request)
  return friend_list_request_;
}
inline ::message::FriendListRequest* Body::release_friend_list_request() {
  clear_has_friend_list_request();
  ::message::FriendListRequest* temp = friend_list_request_;
  friend_list_request_ = NULL;
  return temp;
}
inline void Body::set_allocated_friend_list_request(::message::FriendListRequest* friend_list_request) {
  delete friend_list_request_;
  friend_list_request_ = friend_list_request;
  if (friend_list_request) {
    set_has_friend_list_request();
  } else {
    clear_has_friend_list_request();
  }
  // @@protoc_insertion_point(field_set_allocated:message.Body.friend_list_request)
}

// optional .message.FriendListResponse friend_list_response = 10004;
inline bool Body::has_friend_list_response() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Body::set_has_friend_list_response() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Body::clear_has_friend_list_response() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Body::clear_friend_list_response() {
  if (friend_list_response_ != NULL) friend_list_response_->::message::FriendListResponse::Clear();
  clear_has_friend_list_response();
}
inline const ::message::FriendListResponse& Body::friend_list_response() const {
  // @@protoc_insertion_point(field_get:message.Body.friend_list_response)
  return friend_list_response_ != NULL ? *friend_list_response_ : *default_instance_->friend_list_response_;
}
inline ::message::FriendListResponse* Body::mutable_friend_list_response() {
  set_has_friend_list_response();
  if (friend_list_response_ == NULL) friend_list_response_ = new ::message::FriendListResponse;
  // @@protoc_insertion_point(field_mutable:message.Body.friend_list_response)
  return friend_list_response_;
}
inline ::message::FriendListResponse* Body::release_friend_list_response() {
  clear_has_friend_list_response();
  ::message::FriendListResponse* temp = friend_list_response_;
  friend_list_response_ = NULL;
  return temp;
}
inline void Body::set_allocated_friend_list_response(::message::FriendListResponse* friend_list_response) {
  delete friend_list_response_;
  friend_list_response_ = friend_list_response;
  if (friend_list_response) {
    set_has_friend_list_response();
  } else {
    clear_has_friend_list_response();
  }
  // @@protoc_insertion_point(field_set_allocated:message.Body.friend_list_response)
}

// -------------------------------------------------------------------

// Response

// required int32 retcode = 10;
inline bool Response::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 Response::retcode() const {
  // @@protoc_insertion_point(field_get:message.Response.retcode)
  return retcode_;
}
inline void Response::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
  // @@protoc_insertion_point(field_set:message.Response.retcode)
}

// optional string error_msg = 20;
inline bool Response::has_error_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::set_has_error_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response::clear_has_error_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response::clear_error_msg() {
  if (error_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_msg_->clear();
  }
  clear_has_error_msg();
}
inline const ::std::string& Response::error_msg() const {
  // @@protoc_insertion_point(field_get:message.Response.error_msg)
  return *error_msg_;
}
inline void Response::set_error_msg(const ::std::string& value) {
  set_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_msg_ = new ::std::string;
  }
  error_msg_->assign(value);
  // @@protoc_insertion_point(field_set:message.Response.error_msg)
}
inline void Response::set_error_msg(const char* value) {
  set_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_msg_ = new ::std::string;
  }
  error_msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:message.Response.error_msg)
}
inline void Response::set_error_msg(const char* value, size_t size) {
  set_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_msg_ = new ::std::string;
  }
  error_msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:message.Response.error_msg)
}
inline ::std::string* Response::mutable_error_msg() {
  set_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:message.Response.error_msg)
  return error_msg_;
}
inline ::std::string* Response::release_error_msg() {
  clear_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = error_msg_;
    error_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Response::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_msg_;
  }
  if (error_msg) {
    set_has_error_msg();
    error_msg_ = error_msg;
  } else {
    clear_has_error_msg();
    error_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:message.Response.error_msg)
}

// -------------------------------------------------------------------

// LoginRequest

// required string login_name = 10;
inline bool LoginRequest::has_login_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRequest::set_has_login_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRequest::clear_has_login_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRequest::clear_login_name() {
  if (login_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_name_->clear();
  }
  clear_has_login_name();
}
inline const ::std::string& LoginRequest::login_name() const {
  // @@protoc_insertion_point(field_get:message.LoginRequest.login_name)
  return *login_name_;
}
inline void LoginRequest::set_login_name(const ::std::string& value) {
  set_has_login_name();
  if (login_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_name_ = new ::std::string;
  }
  login_name_->assign(value);
  // @@protoc_insertion_point(field_set:message.LoginRequest.login_name)
}
inline void LoginRequest::set_login_name(const char* value) {
  set_has_login_name();
  if (login_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_name_ = new ::std::string;
  }
  login_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:message.LoginRequest.login_name)
}
inline void LoginRequest::set_login_name(const char* value, size_t size) {
  set_has_login_name();
  if (login_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_name_ = new ::std::string;
  }
  login_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:message.LoginRequest.login_name)
}
inline ::std::string* LoginRequest::mutable_login_name() {
  set_has_login_name();
  if (login_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:message.LoginRequest.login_name)
  return login_name_;
}
inline ::std::string* LoginRequest::release_login_name() {
  clear_has_login_name();
  if (login_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = login_name_;
    login_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginRequest::set_allocated_login_name(::std::string* login_name) {
  if (login_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete login_name_;
  }
  if (login_name) {
    set_has_login_name();
    login_name_ = login_name;
  } else {
    clear_has_login_name();
    login_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:message.LoginRequest.login_name)
}

// required string passwd = 20;
inline bool LoginRequest::has_passwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRequest::set_has_passwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRequest::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRequest::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& LoginRequest::passwd() const {
  // @@protoc_insertion_point(field_get:message.LoginRequest.passwd)
  return *passwd_;
}
inline void LoginRequest::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set:message.LoginRequest.passwd)
}
inline void LoginRequest::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:message.LoginRequest.passwd)
}
inline void LoginRequest::set_passwd(const char* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:message.LoginRequest.passwd)
}
inline ::std::string* LoginRequest::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:message.LoginRequest.passwd)
  return passwd_;
}
inline ::std::string* LoginRequest::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginRequest::set_allocated_passwd(::std::string* passwd) {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passwd_;
  }
  if (passwd) {
    set_has_passwd();
    passwd_ = passwd;
  } else {
    clear_has_passwd();
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:message.LoginRequest.passwd)
}

// -------------------------------------------------------------------

// LoginResponse

// required .message.Response rc = 10;
inline bool LoginResponse::has_rc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginResponse::set_has_rc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginResponse::clear_has_rc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginResponse::clear_rc() {
  if (rc_ != NULL) rc_->::message::Response::Clear();
  clear_has_rc();
}
inline const ::message::Response& LoginResponse::rc() const {
  // @@protoc_insertion_point(field_get:message.LoginResponse.rc)
  return rc_ != NULL ? *rc_ : *default_instance_->rc_;
}
inline ::message::Response* LoginResponse::mutable_rc() {
  set_has_rc();
  if (rc_ == NULL) rc_ = new ::message::Response;
  // @@protoc_insertion_point(field_mutable:message.LoginResponse.rc)
  return rc_;
}
inline ::message::Response* LoginResponse::release_rc() {
  clear_has_rc();
  ::message::Response* temp = rc_;
  rc_ = NULL;
  return temp;
}
inline void LoginResponse::set_allocated_rc(::message::Response* rc) {
  delete rc_;
  rc_ = rc;
  if (rc) {
    set_has_rc();
  } else {
    clear_has_rc();
  }
  // @@protoc_insertion_point(field_set_allocated:message.LoginResponse.rc)
}

// -------------------------------------------------------------------

// FriendListRequest

// required string login_name = 10;
inline bool FriendListRequest::has_login_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendListRequest::set_has_login_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendListRequest::clear_has_login_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendListRequest::clear_login_name() {
  if (login_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_name_->clear();
  }
  clear_has_login_name();
}
inline const ::std::string& FriendListRequest::login_name() const {
  // @@protoc_insertion_point(field_get:message.FriendListRequest.login_name)
  return *login_name_;
}
inline void FriendListRequest::set_login_name(const ::std::string& value) {
  set_has_login_name();
  if (login_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_name_ = new ::std::string;
  }
  login_name_->assign(value);
  // @@protoc_insertion_point(field_set:message.FriendListRequest.login_name)
}
inline void FriendListRequest::set_login_name(const char* value) {
  set_has_login_name();
  if (login_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_name_ = new ::std::string;
  }
  login_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:message.FriendListRequest.login_name)
}
inline void FriendListRequest::set_login_name(const char* value, size_t size) {
  set_has_login_name();
  if (login_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_name_ = new ::std::string;
  }
  login_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:message.FriendListRequest.login_name)
}
inline ::std::string* FriendListRequest::mutable_login_name() {
  set_has_login_name();
  if (login_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:message.FriendListRequest.login_name)
  return login_name_;
}
inline ::std::string* FriendListRequest::release_login_name() {
  clear_has_login_name();
  if (login_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = login_name_;
    login_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FriendListRequest::set_allocated_login_name(::std::string* login_name) {
  if (login_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete login_name_;
  }
  if (login_name) {
    set_has_login_name();
    login_name_ = login_name;
  } else {
    clear_has_login_name();
    login_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:message.FriendListRequest.login_name)
}

// -------------------------------------------------------------------

// FriendListResponse

// required .message.Response rc = 10;
inline bool FriendListResponse::has_rc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendListResponse::set_has_rc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendListResponse::clear_has_rc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendListResponse::clear_rc() {
  if (rc_ != NULL) rc_->::message::Response::Clear();
  clear_has_rc();
}
inline const ::message::Response& FriendListResponse::rc() const {
  // @@protoc_insertion_point(field_get:message.FriendListResponse.rc)
  return rc_ != NULL ? *rc_ : *default_instance_->rc_;
}
inline ::message::Response* FriendListResponse::mutable_rc() {
  set_has_rc();
  if (rc_ == NULL) rc_ = new ::message::Response;
  // @@protoc_insertion_point(field_mutable:message.FriendListResponse.rc)
  return rc_;
}
inline ::message::Response* FriendListResponse::release_rc() {
  clear_has_rc();
  ::message::Response* temp = rc_;
  rc_ = NULL;
  return temp;
}
inline void FriendListResponse::set_allocated_rc(::message::Response* rc) {
  delete rc_;
  rc_ = rc;
  if (rc) {
    set_has_rc();
  } else {
    clear_has_rc();
  }
  // @@protoc_insertion_point(field_set_allocated:message.FriendListResponse.rc)
}

// repeated string friend_list = 20;
inline int FriendListResponse::friend_list_size() const {
  return friend_list_.size();
}
inline void FriendListResponse::clear_friend_list() {
  friend_list_.Clear();
}
inline const ::std::string& FriendListResponse::friend_list(int index) const {
  // @@protoc_insertion_point(field_get:message.FriendListResponse.friend_list)
  return friend_list_.Get(index);
}
inline ::std::string* FriendListResponse::mutable_friend_list(int index) {
  // @@protoc_insertion_point(field_mutable:message.FriendListResponse.friend_list)
  return friend_list_.Mutable(index);
}
inline void FriendListResponse::set_friend_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:message.FriendListResponse.friend_list)
  friend_list_.Mutable(index)->assign(value);
}
inline void FriendListResponse::set_friend_list(int index, const char* value) {
  friend_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:message.FriendListResponse.friend_list)
}
inline void FriendListResponse::set_friend_list(int index, const char* value, size_t size) {
  friend_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:message.FriendListResponse.friend_list)
}
inline ::std::string* FriendListResponse::add_friend_list() {
  return friend_list_.Add();
}
inline void FriendListResponse::add_friend_list(const ::std::string& value) {
  friend_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:message.FriendListResponse.friend_list)
}
inline void FriendListResponse::add_friend_list(const char* value) {
  friend_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:message.FriendListResponse.friend_list)
}
inline void FriendListResponse::add_friend_list(const char* value, size_t size) {
  friend_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:message.FriendListResponse.friend_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FriendListResponse::friend_list() const {
  // @@protoc_insertion_point(field_list:message.FriendListResponse.friend_list)
  return friend_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FriendListResponse::mutable_friend_list() {
  // @@protoc_insertion_point(field_mutable_list:message.FriendListResponse.friend_list)
  return &friend_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::message::MessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::MessageType>() {
  return ::message::MessageType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
